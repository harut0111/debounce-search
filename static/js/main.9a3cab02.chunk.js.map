{"version":3,"sources":["api/index.ts","utils/debounce.ts","App.tsx","helper/handleSetTime.ts","reportWebVitals.ts","index.tsx"],"names":["Api","fetchRandomDogs","a","fetch","response","ok","json","Error","status","withDebounce","timeoutID","callback","wait","args","clearTimeout","setTimeout","debounce","App","React","useState","message","result","setResult","time","setTime","getRandomDogs","console","log","className","percent","strokeWidth","strokeColor","type","placeholder","onChange","limit","setIntervalID","setInterval","clearInterval","handleSetTime","JSON","stringify","width","alt","src","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAKqBA,E,kCAAAA,EACZC,gB,sBAAkB,4BAAAC,EAAA,sEACAC,MAAM,2CADN,YACjBC,EADiB,QAGVC,GAHU,gCAGOD,EAASE,OAHhB,qDAIjB,IAAIC,MAAJ,gCAAmCH,EAASI,SAJ3B,2CCN3B,IAaaC,EAbI,WACf,IAAIC,EAEJ,OAAO,SACLC,EACAC,GAEI,IAAD,uBADAC,EACA,iCADAA,EACA,kBACCH,GAAWI,aAAaJ,GAC5BA,EAAYK,YAAW,kBAAMJ,EAAQ,WAAR,EAAYE,KAAOD,IAIxBI,G,cCiDbC,EAvDH,WAAoB,IAAD,EACDC,IAAMC,SAAqB,CACrDC,QAAS,GACTZ,OAAQ,KAHmB,mBACtBa,EADsB,KACdC,EADc,OAKLJ,IAAMC,SAAS,GALV,mBAKtBI,EALsB,KAKhBC,EALgB,KAOvBC,EAAa,uCAAG,4BAAAvB,EAAA,6DACpBwB,QAAQC,IAAI,oBADQ,kBAGG3B,EAAIC,kBAHP,OAGZoB,EAHY,OAIlBC,EAAUD,GAJQ,gDAMlBK,QAAQC,IAAI,QAAZ,MANkB,yDAAH,qDAenB,OACE,sBAAKC,UAAU,MAAf,UACE,gCACE,mEACA,uBAFF,4CAIE,uBAJF,6CAOA,sBAAKA,UAAU,eAAf,UACE,cAAC,IAAD,CACEC,QAAUN,EAAO,IAAO,IACxBO,YAAa,EACbC,YAAY,YAEd,6CAAiBR,EAAO,IAAO,OAC/B,uBACA,iDAAoBA,EAApB,WAEF,uBACES,KAAK,OACLC,YAAY,oBACZC,SA3BiB,WACrBzB,EAAagB,EAAe,KCzBH,SAC3BD,EACAW,GAEAX,EAAQ,GACR,IAAID,EAAO,EACLa,EAAgBC,aAAY,YAChCd,GAAQ,MACIY,GAAOG,cAAcF,GACjCZ,EAAQD,KACP,KDgBDgB,CAAcf,EAAS,QA2BrB,sBAAKI,UAAU,SAAf,qBAAiCY,KAAKC,UAAUpB,MAEhD,qBAAKO,UAAU,QAAf,SACGP,EAAOD,SAAW,qBAAKsB,MAAM,MAAMC,IAAI,MAAMC,IAAKvB,EAAOD,gBE1CnDyB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9a3cab02.chunk.js","sourcesContent":["export interface resultType {\n  message: string;\n  status: string;\n}\n\nexport default class Api {\n  static fetchRandomDogs = async (): Promise<resultType> => {\n    const response = await fetch(\"https://dog.ceo/api/breeds/image/random\");\n\n    if (response.ok) return await response.json();\n    throw new Error(`An arror has occurrd' ${response.status}`);\n  };\n}\n","const debounce = () => {\n  let timeoutID: ReturnType<typeof setTimeout>;\n\n  return (\n    callback: (...args: unknown[]) => Promise<void>,\n    wait: number,\n    ...args: unknown[]\n  ) => {\n    if (timeoutID) clearTimeout(timeoutID);\n    timeoutID = setTimeout(() => callback(...args), wait);\n  };\n};\n\nexport const withDebounce = debounce();\n","import React from \"react\";\nimport \"./App.css\";\nimport Api, { resultType } from \"./api\";\nimport { withDebounce } from \"./utils/debounce\";\nimport { handleSetTime } from \"./helper/handleSetTime\";\nimport { Line } from \"rc-progress\";\n\nconst App = (): JSX.Element => {\n  const [result, setResult] = React.useState<resultType>({\n    message: \"\",\n    status: \"\",\n  });\n  const [time, setTime] = React.useState(0);\n\n  const getRandomDogs = async () => {\n    console.log(\"API call occured\");\n    try {\n      const result = await Api.fetchRandomDogs();\n      setResult(result);\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  };\n\n  const handleOnChange = () => {\n    withDebounce(getRandomDogs, 500);\n    handleSetTime(setTime, 500);\n  };\n\n  return (\n    <div className=\"App\">\n      <div>\n        <b>in this case wait time is 500ms...</b>\n        <br />\n        open console to see when api call occured\n        <br />\n        it makes next api call only after 500ms\n      </div>\n      <div className=\"progress-bar\">\n        <Line\n          percent={(time / 500) * 100}\n          strokeWidth={4}\n          strokeColor=\"#32CD32\"\n        />\n        <span>percent: {(time / 500) * 100}</span>\n        <br />\n        <span>currentTime: {time}ms</span>\n      </div>\n      <input\n        type=\"text\"\n        placeholder=\"type to search...\"\n        onChange={handleOnChange}\n      />\n      <div className=\"result\">Result: {JSON.stringify(result)}</div>\n\n      <div className=\"image\">\n        {result.message && <img width=\"200\" alt=\"dog\" src={result.message} />}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","export const handleSetTime = (\n  setTime: React.Dispatch<React.SetStateAction<number>>,\n  limit: number\n): void => {\n  setTime(0);\n  let time = 0;\n  const setIntervalID = setInterval(() => {\n    time += 100;\n    if (time >= limit) clearInterval(setIntervalID);\n    setTime(time);\n  }, 100);\n};\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}